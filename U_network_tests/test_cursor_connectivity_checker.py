#!/usr/bin/env python3
"""
Programme de v√©rification des connectivit√©s pour Cursor AI
V√©rifie que le poste de travail dispose de toutes les connectivit√©s n√©cessaires
pour utiliser Cursor AI efficacement.
"""

import requests
import socket
import ssl
import json
import time
import sys
import platform
import subprocess
from urllib.parse import urlparse
from typing import Dict, List, Tuple, Optional
import warnings

# Supprimer les warnings SSL pour les tests
warnings.filterwarnings('ignore', message='Unverified HTTPS request')

class CursorConnectivityChecker:
    """V√©rificateur de connectivit√© pour Cursor AI"""
    
    def __init__(self):
        self.results = {
            'network': {},
            'apis': {},
            'services': {},
            'system': {},
            'problems': [],
            'recommendations': []
        }
        self.timeout = 10  # Timeout par d√©faut de 10 secondes
        
    def log_problem(self, category: str, problem: str, severity: str = "WARNING"):
        """Enregistre un probl√®me d√©tect√©"""
        self.results['problems'].append({
            'category': category,
            'problem': problem,
            'severity': severity,
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S')
        })
        
    def log_recommendation(self, recommendation: str):
        """Enregistre une recommandation"""
        self.results['recommendations'].append(recommendation)
    
    def test_dns_resolution(self) -> bool:
        """Teste la r√©solution DNS"""
        print("üîç Test de r√©solution DNS...")
        try:
            # Test avec plusieurs serveurs DNS publics
            test_domains = [
                'google.com',
                'github.com',
                'cursor.sh',
                'openai.com',
                'api.github.com'
            ]
            
            for domain in test_domains:
                try:
                    ip = socket.gethostbyname(domain)
                    print(f"  ‚úÖ {domain} -> {ip}")
                except socket.gaierror as e:
                    self.log_problem('DNS', f"Impossible de r√©soudre {domain}: {e}", "ERROR")
                    print(f"  ‚ùå {domain}: {e}")
                    return False
            
            self.results['network']['dns'] = True
            return True
            
        except Exception as e:
            self.log_problem('DNS', f"Erreur g√©n√©rale DNS: {e}", "ERROR")
            return False
    
    def test_internet_connectivity(self) -> bool:
        """Teste la connectivit√© internet g√©n√©rale"""
        print("\nüåê Test de connectivit√© internet...")
        try:
            # Test avec plusieurs services
            test_urls = [
                'https://httpbin.org/get',
                'https://api.github.com',
                'https://www.google.com'
            ]
            
            success_count = 0
            for url in test_urls:
                try:
                    response = requests.get(url, timeout=self.timeout, verify=False)
                    if response.status_code == 200:
                        print(f"  ‚úÖ {url} - Status: {response.status_code}")
                        success_count += 1
                    else:
                        print(f"  ‚ö†Ô∏è {url} - Status: {response.status_code}")
                except Exception as e:
                    print(f"  ‚ùå {url}: {e}")
                    self.log_problem('Internet', f"Connexion √©chou√©e vers {url}: {e}")
            
            if success_count == 0:
                self.log_problem('Internet', "Aucune connexion internet d√©tect√©e", "ERROR")
                return False
            elif success_count < len(test_urls):
                self.log_problem('Internet', f"Connectivit√© partielle ({success_count}/{len(test_urls)})", "WARNING")
            
            self.results['network']['internet'] = success_count > 0
            return success_count > 0
            
        except Exception as e:
            self.log_problem('Internet', f"Erreur de test internet: {e}", "ERROR")
            return False
    
    def test_proxy_settings(self) -> Dict:
        """D√©tecte et teste les param√®tres de proxy"""
        print("\nüîß V√©rification des param√®tres proxy...")
        proxy_info = {
            'http_proxy': None,
            'https_proxy': None,
            'proxy_working': False
        }
        
        # V√©rifier les variables d'environnement
        import os
        http_proxy = os.environ.get('HTTP_PROXY') or os.environ.get('http_proxy')
        https_proxy = os.environ.get('HTTPS_PROXY') or os.environ.get('https_proxy')
        
        proxy_info['http_proxy'] = http_proxy
        proxy_info['https_proxy'] = https_proxy
        
        if http_proxy or https_proxy:
            print(f"  üîç Proxy HTTP d√©tect√©: {http_proxy}")
            print(f"  üîç Proxy HTTPS d√©tect√©: {https_proxy}")
            
            # Tester si le proxy fonctionne
            try:
                proxies = {}
                if http_proxy:
                    proxies['http'] = http_proxy
                if https_proxy:
                    proxies['https'] = https_proxy
                
                response = requests.get(
                    'https://httpbin.org/get',
                    proxies=proxies,
                    timeout=self.timeout,
                    verify=False
                )
                if response.status_code == 200:
                    proxy_info['proxy_working'] = True
                    print("  ‚úÖ Proxy fonctionne correctement")
                else:
                    self.log_problem('Proxy', f"Proxy configur√© mais ne fonctionne pas (Status: {response.status_code})")
                    print(f"  ‚ö†Ô∏è Proxy ne fonctionne pas (Status: {response.status_code})")
            except Exception as e:
                self.log_problem('Proxy', f"Erreur avec le proxy: {e}")
                print(f"  ‚ùå Erreur proxy: {e}")
        else:
            print("  ‚ÑπÔ∏è Aucun proxy d√©tect√©")
            proxy_info['proxy_working'] = True  # Pas de proxy = OK
        
        self.results['network']['proxy'] = proxy_info
        return proxy_info
    
    def test_github_api(self) -> bool:
        """Teste l'acc√®s √† l'API GitHub"""
        print("\nüêô Test de l'API GitHub...")
        try:
            # Test de l'API GitHub sans authentification
            response = requests.get(
                'https://api.github.com/rate_limit',
                timeout=self.timeout,
                verify=False
            )
            
            if response.status_code == 200:
                data = response.json()
                print(f"  ‚úÖ API GitHub accessible")
                print(f"  üìä Rate limit: {data.get('rate', {}).get('remaining', 'N/A')} requ√™tes restantes")
                self.results['apis']['github'] = True
                return True
            else:
                self.log_problem('GitHub API', f"Status code: {response.status_code}", "ERROR")
                print(f"  ‚ùå API GitHub inaccessible (Status: {response.status_code})")
                return False
                
        except Exception as e:
            self.log_problem('GitHub API', f"Erreur de connexion: {e}", "ERROR")
            print(f"  ‚ùå Erreur GitHub API: {e}")
            return False
    
    def test_openai_api(self) -> bool:
        """Teste l'acc√®s √† l'API OpenAI (sans cl√© API)"""
        print("\nü§ñ Test de l'API OpenAI...")
        try:
            # Test de l'endpoint OpenAI (sans authentification)
            response = requests.get(
                'https://api.openai.com/v1/models',
                timeout=self.timeout,
                verify=False
            )
            
            # OpenAI retourne 401 sans cl√© API, ce qui est normal
            if response.status_code == 401:
                print("  ‚úÖ API OpenAI accessible (401 attendu sans cl√© API)")
                self.results['apis']['openai'] = True
                return True
            elif response.status_code == 200:
                print("  ‚úÖ API OpenAI accessible")
                self.results['apis']['openai'] = True
                return True
            else:
                self.log_problem('OpenAI API', f"Status code inattendu: {response.status_code}")
                print(f"  ‚ö†Ô∏è API OpenAI - Status inattendu: {response.status_code}")
                return False
                
        except Exception as e:
            self.log_problem('OpenAI API', f"Erreur de connexion: {e}", "ERROR")
            print(f"  ‚ùå Erreur OpenAI API: {e}")
            return False
    
    def test_cursor_services(self) -> bool:
        """Teste l'acc√®s aux services Cursor"""
        print("\nüéØ Test des services Cursor...")
        try:
            # Test du site principal Cursor
            cursor_urls = [
                'https://cursor.sh',
                'https://www.cursor.com'
            ]
            
            success_count = 0
            for url in cursor_urls:
                try:
                    response = requests.get(url, timeout=self.timeout, verify=False)
                    if response.status_code == 200:
                        print(f"  ‚úÖ {url} accessible")
                        success_count += 1
                    else:
                        print(f"  ‚ö†Ô∏è {url} - Status: {response.status_code}")
                except Exception as e:
                    print(f"  ‚ùå {url}: {e}")
                    self.log_problem('Cursor', f"Service Cursor inaccessible: {url} - {e}")
            
            if success_count > 0:
                self.results['services']['cursor'] = True
                return True
            else:
                self.results['services']['cursor'] = False
                return False
                
        except Exception as e:
            self.log_problem('Cursor', f"Erreur de test des services Cursor: {e}", "ERROR")
            return False
    
    def test_system_info(self) -> Dict:
        """Rassemble les informations syst√®me"""
        print("\nüíª Collecte des informations syst√®me...")
        system_info = {
            'platform': platform.platform(),
            'python_version': sys.version,
            'architecture': platform.architecture(),
            'processor': platform.processor(),
            'hostname': socket.gethostname()
        }
        
        print(f"  üñ•Ô∏è Plateforme: {system_info['platform']}")
        print(f"  üêç Python: {system_info['python_version'].split()[0]}")
        print(f"  üè† Hostname: {system_info['hostname']}")
        
        self.results['system'] = system_info
        return system_info
    
    def test_ssl_certificates(self) -> bool:
        """Teste la validit√© des certificats SSL"""
        print("\nüîê Test des certificats SSL...")
        try:
            test_domains = [
                'github.com',
                'api.github.com',
                'openai.com',
                'cursor.sh'
            ]
            
            ssl_issues = []
            for domain in test_domains:
                try:
                    context = ssl.create_default_context()
                    with socket.create_connection((domain, 443), timeout=self.timeout) as sock:
                        with context.wrap_socket(sock, server_hostname=domain) as ssock:
                            cert = ssock.getpeercert()
                            print(f"  ‚úÖ {domain} - Certificat SSL valide")
                except Exception as e:
                    ssl_issues.append(f"{domain}: {e}")
                    print(f"  ‚ùå {domain} - Probl√®me SSL: {e}")
            
            if ssl_issues:
                self.log_problem('SSL', f"Probl√®mes de certificats SSL: {'; '.join(ssl_issues)}")
                return False
            else:
                self.results['network']['ssl'] = True
                return True
                
        except Exception as e:
            self.log_problem('SSL', f"Erreur de test SSL: {e}", "ERROR")
            return False
    
    def generate_report(self) -> str:
        """G√©n√®re un rapport d√©taill√©"""
        report = []
        report.append("=" * 60)
        report.append("RAPPORT DE V√âRIFICATION DES CONNECTIVIT√âS CURSOR AI")
        report.append("=" * 60)
        report.append(f"Date: {time.strftime('%Y-%m-%d %H:%M:%S')}")
        report.append(f"Hostname: {self.results['system'].get('hostname', 'N/A')}")
        report.append("")
        
        # R√©sum√© des probl√®mes
        if self.results['problems']:
            report.append("üö® PROBL√àMES D√âTECT√âS:")
            report.append("-" * 30)
            
            # Grouper par cat√©gorie
            by_category = {}
            for problem in self.results['problems']:
                category = problem['category']
                if category not in by_category:
                    by_category[category] = []
                by_category[category].append(problem)
            
            for category, problems in by_category.items():
                report.append(f"\nüìã {category.upper()}:")
                for problem in problems:
                    severity_icon = "üî¥" if problem['severity'] == "ERROR" else "üü°"
                    report.append(f"  {severity_icon} {problem['problem']}")
                    report.append(f"     Timestamp: {problem['timestamp']}")
        else:
            report.append("‚úÖ AUCUN PROBL√àME MAJEUR D√âTECT√â")
        
        # Recommandations
        if self.results['recommendations']:
            report.append("\nüí° RECOMMANDATIONS:")
            report.append("-" * 20)
            for i, rec in enumerate(self.results['recommendations'], 1):
                report.append(f"{i}. {rec}")
        
        # √âtat des services
        report.append("\nüìä √âTAT DES SERVICES:")
        report.append("-" * 20)
        
        services_status = {
            'R√©solution DNS': self.results['network'].get('dns', False),
            'Connectivit√© Internet': self.results['network'].get('internet', False),
            'Certificats SSL': self.results['network'].get('ssl', False),
            'API GitHub': self.results['apis'].get('github', False),
            'API OpenAI': self.results['apis'].get('openai', False),
            'Services Cursor': self.results['services'].get('cursor', False)
        }
        
        for service, status in services_status.items():
            icon = "‚úÖ" if status else "‚ùå"
            report.append(f"  {icon} {service}")
        
        # Proxy info
        proxy_info = self.results['network'].get('proxy', {})
        if proxy_info:
            report.append(f"\nüîß CONFIGURATION PROXY:")
            report.append(f"  HTTP: {proxy_info.get('http_proxy', 'Non configur√©')}")
            report.append(f"  HTTPS: {proxy_info.get('https_proxy', 'Non configur√©')}")
            report.append(f"  Fonctionnel: {'‚úÖ' if proxy_info.get('proxy_working', False) else '‚ùå'}")
        
        report.append("\n" + "=" * 60)
        return "\n".join(report)
    
    def run_all_tests(self):
        """Ex√©cute tous les tests de connectivit√©"""
        print("üöÄ D√©marrage de la v√©rification des connectivit√©s Cursor AI...")
        print("=" * 60)
        
        # Tests syst√®me
        self.test_system_info()
        
        # Tests r√©seau
        self.test_dns_resolution()
        self.test_internet_connectivity()
        self.test_proxy_settings()
        self.test_ssl_certificates()
        
        # Tests APIs
        self.test_github_api()
        self.test_openai_api()
        
        # Tests services
        self.test_cursor_services()
        
        # G√©n√©ration des recommandations
        self.generate_recommendations()
        
        print("\n" + "=" * 60)
        print("‚úÖ V√©rification termin√©e!")
        
        return self.results
    
    def generate_recommendations(self):
        """G√©n√®re des recommandations bas√©es sur les probl√®mes d√©tect√©s"""
        problems_by_category = {}
        for problem in self.results['problems']:
            category = problem['category']
            if category not in problems_by_category:
                problems_by_category[category] = []
            problems_by_category[category].append(problem)
        
        # Recommandations bas√©es sur les cat√©gories de probl√®mes
        if 'DNS' in problems_by_category:
            self.log_recommendation("V√©rifiez votre configuration DNS ou contactez votre administrateur r√©seau")
            self.log_recommendation("Essayez de changer de serveur DNS (8.8.8.8, 1.1.1.1)")
        
        if 'Internet' in problems_by_category:
            self.log_recommendation("V√©rifiez votre connexion internet")
            self.log_recommendation("Testez avec un autre navigateur ou outil de diagnostic r√©seau")
        
        if 'Proxy' in problems_by_category:
            self.log_recommendation("V√©rifiez la configuration de votre proxy")
            self.log_recommendation("Contactez votre administrateur r√©seau pour les param√®tres proxy")
        
        if 'SSL' in problems_by_category:
            self.log_recommendation("V√©rifiez la date/heure de votre syst√®me")
            self.log_recommendation("Mettez √† jour les certificats racine de votre syst√®me")
        
        if 'GitHub API' in problems_by_category:
            self.log_recommendation("V√©rifiez si GitHub n'est pas bloqu√© par votre firewall")
            self.log_recommendation("Testez l'acc√®s √† github.com dans votre navigateur")
        
        if 'OpenAI API' in problems_by_category:
            self.log_recommendation("V√©rifiez si OpenAI n'est pas bloqu√© par votre firewall")
            self.log_recommendation("Certains pays/r√©seaux bloquent l'acc√®s √† OpenAI")
        
        if 'Cursor' in problems_by_category:
            self.log_recommendation("V√©rifiez l'acc√®s √† cursor.sh dans votre navigateur")
            self.log_recommendation("Essayez de d√©sactiver temporairement votre antivirus/firewall")


def main():
    """Fonction principale"""
    checker = CursorConnectivityChecker()
    
    try:
        # Ex√©cuter tous les tests
        results = checker.run_all_tests()
        
        # G√©n√©rer et afficher le rapport
        report = checker.generate_report()
        print(report)
        
        # Sauvegarder le rapport
        timestamp = time.strftime('%Y%m%d_%H%M%S')
        report_filename = f"cursor_connectivity_report_{timestamp}.txt"
        
        with open(report_filename, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"\nüìÑ Rapport sauvegard√© dans: {report_filename}")
        
        # Code de sortie bas√© sur les probl√®mes d√©tect√©s
        error_count = len([p for p in results['problems'] if p['severity'] == 'ERROR'])
        if error_count > 0:
            print(f"\n‚ö†Ô∏è {error_count} erreur(s) critique(s) d√©tect√©e(s)")
            sys.exit(1)
        else:
            print("\n‚úÖ Aucune erreur critique d√©tect√©e")
            sys.exit(0)
            
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è V√©rification interrompue par l'utilisateur")
        sys.exit(130)
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
